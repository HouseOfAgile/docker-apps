main:
  docker_from: 'debian:buster'
  docker_init: |
    # Let the container know that there is no tty
    ENV DEBIAN_FRONTEND noninteractive
    ENV NGINX_VERSION 1.17.7-1~buster
    ENV php_conf /etc/php/_PHP_VERSION/fpm/php.ini
    ENV fpm_conf /etc/php/_PHP_VERSION/fpm/pool.d/www.conf
    RUN apt-get update
  docker_reqs: |
    COPY files/hoa-purephp-nginx-fpm/supervisor.conf /etc/supervisor/supervisord.conf
  docker_core: |
    # Install Basic Requirements
    RUN buildDeps='curl gcc make autoconf libc-dev zlib1g-dev pkg-config' \
        && set -x \
        && apt-get update \
        && apt-get install --no-install-recommends $buildDeps --no-install-suggests -q -y gnupg2 dirmngr wget apt-transport-https lsb-release ca-certificates \
        && \
        NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
        found=''; \
        for server in \
          ha.pool.sks-keyservers.net \
          hkp://keyserver.ubuntu.com:80 \
          hkp://p80.pool.sks-keyservers.net:80 \
          pgp.mit.edu \
        ; do \
          echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
          apt-key adv --batch --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; \
        done; \
        test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; \
        echo "deb http://nginx.org/packages/mainline/debian/ buster nginx" >> /etc/apt/sources.list \
        && wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg \
        && echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list \
        && apt-get update \
        && apt-get install --no-install-recommends --no-install-suggests -q -y \
                apt-utils \
                nano \
                zip \
                unzip \
                python-pip \
                python-setuptools \
                git \
                libmemcached-dev \
                libmemcached11 \
                libmagickwand-dev \
                nginx=${NGINX_VERSION} \
                php_PHP_VERSION-fpm \
                php_PHP_VERSION-cli \
                php_PHP_VERSION-bcmath \
                php_PHP_VERSION-dev \
                php_PHP_VERSION-common \
                php_PHP_VERSION-json \
                php_PHP_VERSION-opcache \
                php_PHP_VERSION-readline \
                php_PHP_VERSION-mbstring \
                php_PHP_VERSION-curl \
                php_PHP_VERSION-gd \
                php_PHP_VERSION-mysql \
                php_PHP_VERSION-zip \
                php_PHP_VERSION-pgsql \
                php_PHP_VERSION-intl \
                php_PHP_VERSION-xml \
                php-pear \
        && pecl -d php_suffix=_PHP_VERSION install -o -f redis memcached imagick \
        && mkdir -p /run/php \
        && pip install wheel \
        && pip install supervisor supervisor-stdout \
        && echo "#!/bin/sh\nexit 0" > /usr/sbin/policy-rc.d \
        && rm -rf /etc/nginx/conf.d/default.conf \
        && sed -i -e "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g" ${php_conf} \
        && sed -i -e "s/memory_limit\s*=\s*.*/memory_limit = 256M/g" ${php_conf} \
        && sed -i -e "s/upload_max_filesize\s*=\s*2M/upload_max_filesize = 100M/g" ${php_conf} \
        && sed -i -e "s/post_max_size\s*=\s*8M/post_max_size = 100M/g" ${php_conf} \
        && sed -i -e "s/variables_order = \"GPCS\"/variables_order = \"EGPCS\"/g" ${php_conf} \
        && sed -i -e "s/;daemonize\s*=\s*yes/daemonize = no/g" /etc/php/_PHP_VERSION/fpm/php-fpm.conf \
        && sed -i -e "s/;catch_workers_output\s*=\s*yes/catch_workers_output = yes/g" ${fpm_conf} \
        && sed -i -e "s/pm.max_children = 5/pm.max_children = 4/g" ${fpm_conf} \
        && sed -i -e "s/pm.start_servers = 2/pm.start_servers = 3/g" ${fpm_conf} \
        && sed -i -e "s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g" ${fpm_conf} \
        && sed -i -e "s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g" ${fpm_conf} \
        && sed -i -e "s/pm.max_requests = 500/pm.max_requests = 200/g" ${fpm_conf} \
        && sed -i -e "s/www-data/nginx/g" ${fpm_conf} \
        && sed -i -e "s/^;clear_env = no$/clear_env = no/" ${fpm_conf} \
        && echo "extension=redis.so" > /etc/php/_PHP_VERSION/mods-available/redis.ini \
        && echo "extension=memcached.so" > /etc/php/_PHP_VERSION/mods-available/memcached.ini \
        && echo "extension=imagick.so" > /etc/php/_PHP_VERSION/mods-available/imagick.ini \
        && ln -sf /etc/php/_PHP_VERSION/mods-available/redis.ini /etc/php/_PHP_VERSION/fpm/conf.d/20-redis.ini \
        && ln -sf /etc/php/_PHP_VERSION/mods-available/redis.ini /etc/php/_PHP_VERSION/cli/conf.d/20-redis.ini \
        && ln -sf /etc/php/_PHP_VERSION/mods-available/memcached.ini /etc/php/_PHP_VERSION/fpm/conf.d/20-memcached.ini \
        && ln -sf /etc/php/_PHP_VERSION/mods-available/memcached.ini /etc/php/_PHP_VERSION/cli/conf.d/20-memcached.ini \
        && ln -sf /etc/php/_PHP_VERSION/mods-available/imagick.ini /etc/php/_PHP_VERSION/fpm/conf.d/20-imagick.ini \
        && ln -sf /etc/php/_PHP_VERSION/mods-available/imagick.ini /etc/php/_PHP_VERSION/cli/conf.d/20-imagick.ini


    # RUN crontab -l | { cat; echo "* * * * * /usr/bin/php /app/bin/console scheduler:execute -vvv >> /app/var/log/scheduler-log.log 2>&1"; } | crontab -u developer -

    # dev useful tools
    RUN apt-get update && apt-get install -y -qq cron sudo less procps links wget vim lsof net-tools rsyslog

    COPY files/hoa-purephp-nginx-fpm/php-ini-overrides.ini /usr/local/etc/php/conf.d/php-ini-overrides.ini
    COPY --from=ochinchina/supervisord:latest /usr/local/bin/supervisord /usr/local/bin/supervisord

    ADD files/hoa-purephp-nginx-fpm/nginx-default.conf /etc/nginx/conf.d/default.conf
    RUN sudo sed -i 's#%%php_fpm_sock_file%%#/run/php/php_PHP_VERSION-fpm.sock#g' /etc/nginx/conf.d/default.conf
    WORKDIR /app
    ADD . /app

  docker_post: |
    # We have to run supervisord as root somehow
    USER #depl_user#
    ENV HOME /home/#depl_user#
    
    USER root
  docker_cmd: 'CMD ["/usr/local/bin/supervisord"]'
  docker_expose: [8080]
main_vars:
  _PHP_VERSION: '7.2'
variants:
  - name: php5.6
    variant_vars:
      _PHP_VERSION: '5.6'
  - name: php7.1
    variant_vars:
      _PHP_VERSION: '7.1'
  - name: php7.2
    variant_vars:
      _PHP_VERSION: '7.2'
  - name: php7.0
    variant_vars:
      _PHP_VERSION: '7.0'
  - name: php7.3
    variant_vars:
      _PHP_VERSION: '7.3'
